####################################################################
# 공통 환경 설정
####################################################################
#-------------------------------------------------------------
# springdoc 정의
# http://localhost:8080/swagger-ui.html
# http://localhost:8080/api-docs
# http://localhost:8080/api-docs.yaml
#-------------------------------------------------------------      
springdoc:
  api-docs:
    path: /api-docs # spring boot 웹 애플리케이션의 api를 OpenAPI 3을 이용하여 json 형식화 한것의 경로
  default-consumes-media-type: application/json # request media type 의 기본 값
  default-produces-media-type: application/json # response media type 의 기본 값
  swagger-ui: # 기본값 : 컨트롤러 내에서 정의한 api 메서드 순
    enabled: true
    operations-sorter: method # 태그 내 각 api의 정렬 기준
                              # alpha(알파벳 오름차순), method(http method 순) 
    tags-sorter: alpha 
    path: swagger-ui.html
    disable-swagger-default-url: true
      # json화 된 config파일 대신 파라미터를 이용하여 swagger-ui에 접근하도록 합니다.
      # api-docs(/api-docs) 및 swagger-ui.configUrl(/api-docs/swagger-config)를 두번씩 호출하는 것을 방지합니다.
    doc-expansion: none # 기본 값: list
      # tag와 operation을 펼치는 방식에 대한 설정
      # String=["list", "full", "none"]
      # none으로 설정할 경우, tag 및 operation이 모두 닫힌채로 문서가 열립니다.
  #paths-to-match: # OpenAPI 3 로 문서화할 api path 리스트
  #  - /**
  
api:  # Swagger UI Information
  info:
    title: CareMoa Member Service API
    description: API to fetch CareMoa Member
    version: 1.0.0
    terms-of-service: http://caremoa.com/terms/
    contact:
      name: CareMoa Service API Team
      email: lbg@sk.com
      url: http://sk.com/caremoateam
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html

#-------------------------------------------------------------
# Feign Client 호출 URL 정의
#-------------------------------------------------------------
feign:
  client:
    config:
      default:
        errorDecoder: com.caremoa.member.exception.FeignErrorDecoder
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic

#-------------------------------------------------------------
# mybatis 설정 정의
#-------------------------------------------------------------
mybatis:  # type을 쉽게 쓰기 위해서 dto 패키지를 type-aliaes에 설정
  # xml파일 result type에 패키지명을 생략할 수 있도록 Alias 설정
  type-aliases-package: com.caremoa.member.domain.mybatis
  # resource디렉토리의 mapper xml 파일위치
  mapper-locations: classpath:mapper/**/*.xml
  # type-handlers-package: com.example.typehandler
  configuration:
  # map-underscore-to-camel-case: true
    default-fetch-size: 500
    default-statement-timeout: 30

---
####################################################################
# Local 개발환경 설정
####################################################################
spring:
  config:
    activate:
      on-profile: default
      
  data:
    rest:
      base-path: /api
#      default-media-type: application/hal+json
    web:
      pageable:
        default-page-size: 20 # 기본 페이지 사이즈
        max-page-size: 2000 # 최대 페이지 사이즈
      
  jackson:
    serialization:
      INDENT_OUTPUT: false

  sql:
    init:
      mode: embedded # ALWAYS: 모든 데이터베이스에 sql 스크립트를 동작시킨다. / EMBDEDED: embedded 데이터베이스만 sql 스크립트를 동작시킨다. / NEVER: 모든 데이터베이스에 sql 스크립트를 동작시키지 않는다.
      schema-locations: classpath*:db/${database}/schema.sql
      data-locations: classpath*:db/${database}/data.sql
      #classpath*:db/schema.sql
      #classpath*:db/${database}/data.sql

  datasource:
    url: jdbc:h2:mem:memberdb 
    username: sa
    password:
    driver-class-name: org.h2.Driver
    hikari:   # SpringBoot2.x 는 디폴트로 HikariCP(성능좋음)
      connection-timeout: 50000
      idle-timeout: 300000
      max-lifetime: 900000
      maximum-pool-size: 10
      minimum-idle: 10
      pool-name: ConnPool
      connection-test-query: select 1 from dual
      
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none # create, create-drop, validate, update, none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        # SpringPhysicalNamingStrategy(Default)  =>  camel case를 underscore 형태로 변경
        # PhysicalNamingStrategyStandardImpl     =>  변수 이름을 그대로 사용
        use-new-id-generator-mappings: false
    generate-ddl: true
    show_sql: true
    properties:
      hibernate:
        # dialect: org.hibernate.dialect.Oracle10gDialect
        dialect: org.hibernate.dialect.H2Dialect
        "[format_sql]": true
        "[show_sql]": true
        "[use_sql_comment]": true

#-------------------------------------------------------------
# h2 Console을 이용한 datasource 접근 처리
# http://localhost:8080/caremoa.member/h2-console
#-------------------------------------------------------------
  h2:
    console:
      enabled: true
      path: /h2-console

#-------------------------------------------------------------
# Kafka 설정
#-------------------------------------------------------------
  cloud:
    function:
      #definition: wheneverContractCompletedThenReflectionScore;wheneverClaimCompletedThenReflectionScore;whenevereReviewMemberEvaluatedThenReflectionScore;
      definition: basicConsumer;
      
    stream:
      kafka:
        #binder:
        #  brokers: localhost:9091,localhost:9092,localhost:9093
        #  zkNodes: localhost:2181,localhost:2182,localhost:2183
        binder:
          brokers: localhost:9092
          #brokers: ec2-3-39-223-154.ap-northeast-2.compute.amazonaws.com:9092
      bindings:
        basicConsumer-in-0:
          group: contract
          destination: caremoa-topic
          content-type: application/json          
        
        basicProducer-out-0:
          destination: caremoa-topic
          content-type: application/json
        
       # basicConsumer-in-0:
       #   group: member
       #   destination: caremoa-topic
       #   content-type: application/json
 
#-------------------------------------------------------------
# 서버 포트 설정
#-------------------------------------------------------------
server:
  port: 8081
  servlet:
    contextPath: /member

#-------------------------------------------------------------
# log File 설정
#-------------------------------------------------------------
logging:
  level:
    root: error # trace, debug, info, warn, error, fatal
    "[org.springframework]": info
    "[org.springframework.jdbc]": info
    "[org.hibernate.type]": trace      # 파라메터값 확인을 위해서는 trace / off
    "[com.caremoa]": debug
        
    jdbc:
      connection: off
      sqlonly: off
      sqltiming: info
      audit: off
      result: off
      resultsettable: info
  file:
    name: logs/app.log
  logback:
    rollingpolicy:
      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM-dd}-%i.log
      max-file-size: 100MB
      max-history: 30
  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss.SSS,Asia/Seoul
      
#-------------------------------------------------------------
# 사용자 정의 설정
#-------------------------------------------------------------        
database: h2    
prop:
  test:
    url: http://localhost:8081/member/api

---
####################################################################
# 서버배포(Docker)환경 설정
####################################################################    
spring:
  config:
    activate:
      on-profile: docker

  data:
    rest:
      base-path: /api
#      default-media-type: application/hal+json
    web:
      pageable:
        default-page-size: 20 # 기본 페이지 사이즈
        max-page-size: 2000 # 최대 페이지 사이즈
      
  jackson:
    serialization:
      INDENT_OUTPUT: false

  sql:
    init:
      mode: embedded # ALWAYS: 모든 데이터베이스에 sql 스크립트를 동작시킨다. / EMBDEDED: embedded 데이터베이스만 sql 스크립트를 동작시킨다. / NEVER: 모든 데이터베이스에 sql 스크립트를 동작시키지 않는다.
      schema-locations: classpath*:db/${database}/schema.sql
      data-locations: classpath*:db/${database}/data.sql
      #classpath*:db/schema.sql
      #classpath*:db/${database}/data.sql

  datasource:
    url: jdbc:mysql://3.39.223.154:3306/caremoa_member?serverTimezone=Asia/Seoul 
    username: user1
    password: user1
    hikari:   # SpringBoot2.x 는 디폴트로 HikariCP(성능좋음)
      connection-timeout: 50000
      idle-timeout: 300000
      max-lifetime: 900000
      maximum-pool-size: 10
      minimum-idle: 10
      pool-name: ConnPool
      connection-test-query: select 1 from dual
      
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none # create, create-drop, validate, update, none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        # SpringPhysicalNamingStrategy(Default)  =>  camel case를 underscore 형태로 변경
        # PhysicalNamingStrategyStandardImpl     =>  변수 이름을 그대로 사용
        use-new-id-generator-mappings: false
    generate-ddl: true
    show_sql: true
    properties:
      hibernate:
        # dialect: org.hibernate.dialect.Oracle10gDialect
        dialect: org.hibernate.dialect.MySQL8Dialect
        "[format_sql]": true
        "[show_sql]": true
        "[use_sql_comment]": true

#-------------------------------------------------------------
# h2 Console을 이용한 datasource 접근 처리
# http://localhost:8080/caremoa.member/h2-console
#-------------------------------------------------------------
  h2:
    console:
      enabled: true
      path: /h2-console

#-------------------------------------------------------------
# Kafka 설정
#-------------------------------------------------------------
  cloud:
    function:
      #definition: wheneverContractCompletedThenReflectionScore;wheneverClaimCompletedThenReflectionScore;whenevereReviewMemberEvaluatedThenReflectionScore;
      definition: basicConsumer;
      
    stream:
      kafka:
        #binder:
        #  brokers: localhost:9091,localhost:9092,localhost:9093
        #  zkNodes: localhost:2181,localhost:2182,localhost:2183
        binder:
          # brokers: localhost:9092
          brokers: ec2-3-39-223-154.ap-northeast-2.compute.amazonaws.com:9092
      bindings:
        basicConsumer-in-0:
          group: contract
          destination: caremoa-topic
          content-type: application/json          
        
        basicProducer-out-0:
          destination: caremoa-topic
          content-type: application/json
        
       # basicConsumer-in-0:
       #   group: member
       #   destination: caremoa-topic
       #   content-type: application/json
 
#-------------------------------------------------------------
# 서버 포트 설정
#-------------------------------------------------------------
server:
  port: 8080
  servlet:
    contextPath: /member

#-------------------------------------------------------------
# log File 설정
#-------------------------------------------------------------
logging:
  level:
    root: error # trace, debug, info, warn, error, fatal
    "[org.springframework]": info
    "[org.springframework.jdbc]": info
    "[org.hibernate.type]": trace      # 파라메터값 확인을 위해서는 trace / off
    "[com.caremoa]": debug
        
    jdbc:
      connection: off
      sqlonly: off
      sqltiming: info
      audit: off
      result: off
      resultsettable: info
  file:
    name: logs/app.log
  logback:
    rollingpolicy:
      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM-dd}-%i.log
      max-file-size: 100MB
      max-history: 30
  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss.SSS,Asia/Seoul
    
#-------------------------------------------------------------
# 사용자 정의 설정
#-------------------------------------------------------------        
database: mysql    
prop:
  test:
    url: http://localhost:8081/member/api
